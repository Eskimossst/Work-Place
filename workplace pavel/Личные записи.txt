Понимание HTML

Самое просто понимание работоспособности HTML, основной конструкт текста без внешнего оформления, набор простых команд определяющий положение текста на выводимой странице. Основная задача, понимать команды и их роль в создании сайтовой основы.
Сайт для быстрового понимания команд и их существующие виды: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements
Выделяю то что пока отсуствовало на сайте: <hr/ > - горизонтальная линия, <br /> - отступ между текстом.
Важное наблюдение в работе с сайтом: https://codepen.io/pen?editors=1000. Мною было обнаружено следующие полезные функции, первая из которых это пропись команды методом простой буквы и прожатием кнопочки Tab, далее так называемый комментатор который замораживает один из тегов для возможного использования в будущем, это сочитание кнопок "CTRL + /", с помощью которых мы получаем следующие значение <!-- <br /> -->, значения вопросительного знака и отступа, замораживает команду для будущего её использования. Третьми редактор текста применяемый и все последующие осуществлены мной в программе Visial Studio, была <em> или <i>, который является устаревшей формулировкой <em>, который выполняет функцию наклона текста и более старый тип не читается роботами так как не распознает его, четвертым становится <strong>, простая функция просто выделение жирным текст и комбинируется с <i>, делаю предположение что и с <em> аналогично происходит, пятым стал более интересный <ul> - связанный тег который помещает в себя списки такие как <li>, что в свою очередь может содержать информацию от обычного текста до гиперссылок на разного рода материалы, к близкородственному по свойствам отношу команду <ol>, которая представляет список начиная отчет с первого пункта и последующими за ним, шестой пункт выделяется полноценной работой с гиперссылками, который выполнятся с помощью команды <a href=""> в которую в свою очередь в ковычки мы пишем URL адрес сайта а после них мы пишем упрощенное название, создавая условно говоря кнопку, дополнением для открытия нового окна служит команда target="_blank", она подразумевает что мы будем переходить по ссылке в новом окне не закрывая предыдущее. Новым этапом стало создание ссылки на отдельный файл HTML который будет иметь в себе новую информацию заведомо заложенную сейчас, способ передачи довольно простой, схожий по смыслу как и для URL ссылок, просто указание конкретного файла. Открытием становится возможность вставки фотографии для документа HTML, которая производится с помощью команды <img src="">, где в src мы указываем путь к файлу будь то гиперссылка или же файл лежащий на нашем компьютере, так же есть еще alt="", эта функция существует для машин с целью нахождения потерянного фото в случаях ошибки прописи человека не верного адреса или расположения файла внутри системы. Форма таблицы осуществляется командой <table>, которая в свою очередь делится на другие две команды: <tr> - что означает строка и <td> - что означает столбец,<th> - который делает самую верхнюю главню часть любой таблицы, а так же важный элемент любой таблицы устаревший но простой border,который создает границы для каждой строки и каждого столбца, отдельно можно вынести конструкт части для таблиц такие как <thead> и <tbody> которые обьединяют в себе тот самый заголовок а tbody помещает в себе данные таблицы из всех трех строк и трех колонок, атрибут cellspacing в формате таблицы дает ей возможность разграничивать более свободно пространство необходимое нам. Пополняя список команд узнаем о <form> и атрибут <input type="text">, где он определяет по типу задач кое он будет выполнять, по умолчанию у нас стоит text, что означает, что мы можем что-то написать в окошке, чтобы написать текст который дает описание окну снизу понадобится атрибут <label for=""> который по умолчанию будет привязан к существующей строке или значению, но чтобы дать больше конкретики, мы можем конкретизировать нашу связку этого атрибута просто записав условное обозначение в кавычках и указать для существующей страки или значения id который будет для нее уникальным и будет отображаться конкретно в этом случае, внутри строк чтобы не оставлять их пустыми, можно вписать текст который будет указывать что здесь нужно указать, декоративный элемент placeholder,для пользователей можно сделать полноценную обширную текстовую зону с помощью функции <textarea name="", где в ковычках мы так же указываем привязку к конкретной подписи, произвести изменения размера стартового окна можно командой rown и cols - что означают столбец и строку,одним из интересных типов атриба input можно выделить submit, данная форма выполняет за собой функцию переадрессации которая записывается в самом form через команду action, и там можно выбрать файл,ссылку и так далее, или по умолчанию оставить возможность ссылаться на конкретный документ в котором мы работаем через "/".
Добавляю еще один полезный сайт для hr: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr. На данном сайте можно изменять и корректировать команду которой разделяем данную линию.
Добавляю полезный сайт для em: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/em.
Добавляю полезный сайт для ul: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul.
Добавляю полезный сайт для ol: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol
Добавляю полезный сайт для table: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/table.
Добавляю полезный сайт для input: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input.

Подводя итоги, могу отметить удобную и упрощенную форму для создания страницы HTML в программе Visial Studio,мню было произведено полное базовое ознакомление с стартовыми командами и их применением, а так же последующие использование и рассмотрение которое позволило мне самостоятельно разобраться в данной теме и создать свой рабочий сайт. Для более интересного и полноценного раскрытия возможностей сайта, я начинаю свой курс изучения CSS для применения к текущему полученному опыту для создания более наполняемого контента.

Понимание CSS

Краткое понимание что такое CSS - это стилизующий набор архаичных правил который улучшает внешней вид работы сайта который мы ранее написали в HTML, и по сути мы продолждаем работу в том же самом сайте с несколькими расширениями, познакомимся с основами.
Первым становится известный уже <body> только дополняемый функцией style, которому можно задать значение background:"", где в ковычках можно указать цвет который будет полностью заполнять нашу рабочую страницу, так же цвет можно выбирать любой в открывающейся палитре. Возвращаясь к style стоит отметить для его глобального использования мы заносим его как полноценную функцию в <head> не атрибут чтобы упрощать использование задач, отличие от первого понимание заключается лишь в конкретике по отношению к конкретному элементу и только. Переходя к усложненной форме, у нас открывается функция <link>, которая как и последняя записывается в head и выполняет функцию подключения дополнительных файлов, мы создаем файл формата ".css", в котором мы указываем так же цвет, например <body>, и у нас функция преобретает следующий вид link href="Doc.css" rel="Stylesheet"/>, где href - это путь к нашему файлу имеющему название и форму записи, и rel - это тип указанного файла, в данном случае мы указываем то самое разрешение CSS, и получаем вынесенный за пределы HTML, конструкт цветов в отдельно хранящемся и контролируем файле, чтобы не создавать дополнительную нагрузку. Полезной функцией открывается возможность изменения шрифта текста с командой font-size: Npx; где N - переменное число которое мы задаем для определения размера в пикселях, добавляя к этому пункту можно отнести font-weight, который изменяет жирность шрифта в диапозоне 100-900 но есть и в нем различные не стандартные решения, переходя к основе выделяю font-family, который уже задает используемый шрифт отображаемый на нашей странице, помимо использования, можно загрузить собственный шрифт, используя этот сайт: https://fonts.google.com , на нем мы выбираем необходимый нам и через <code>, у нас есть выбор вставить его через <link> или импортировать @import, берем гоотовый код и вставляем его в документ, в font-family так же добавляем описание шрифта которое есть на сайте чуть ниже кода. А теперь когда мы наконец освоили три базовых понимания шрифтом, нам открывается возможность упростить все три значения в одну строчку, для этого мы берем font, куда записываем значения: размер шрифта, Npx и само название шрифта. Поигравшись со шрифтами, размерами и видами, мы переходим к редактуре индивидуального обьекта и знакомимся с понятием class, создавая класс внутри элементов атрибутов мы подчеркиваем им конкретнный статус для программы CSS, для будущего взаимодействия с ним, создав class, мы переходим в файл CSS и там прописываем ".class" - где класс это название нашего уникального тега, далее мы раскрываем в нем необходимые параметры, как пример, берем фотографию которая есть на нашей странице и переносим значения ее длинны в созданный нами .class, и после мы можем немного изменить его рамку, прописывая border-radius: Npx, с количество пикселей необходимых,отметим что можно работать как с id так и с class, разницы всего две, это "." и "#" в начале перед названием и то что id уникален и не может быть использован повторно, в то время как class имеет свойство распостранения. Визуальным инструментом улучшения фотографии может стать атрибут "box-shadow: Npx Npx Npx Npx rgba", который может выражаться в форме обводки для нашей фотографии, положение и прочее можно будет посмотреть на сайте, который прикреплю после, а сейчас конкретно по существу, Npx в четверократном размере указывает куда и как под каким наклоном будет идти та самая тень, rgba - выполяет функция выбора цвета который будет применим для нашей фотографии. Стоит упомянуть новый атрибут CSS, <div>, который мы записываем для начала в HTML, он позволит нам красиво оформлять текст, мы прописываем уже изученный class присваивая ему конкретное значение и записываем его аналогично как работе с фото в документе CSS, у нас получается обращение ".class p", p - это обращение к тексту который присуствует в пределах работы конструкт <div>, мы можем изменить текст с помощью color, или убрать отступы или увеличивать их с помощью margin, или же редактировать имеющийся текст через font-style, выводя этот параметр из HTML,font-weight - реализует жирность текста как по умолчанию со значением bold, text-decoration может принимать разные свойства, одним из примеров underline, который подчеркивает текст, text-transform позволяет давать определения тексту заглавных букв, или применять крупный текст для всего набора сразу, полезный потенциал стоит отметить, сюда же можно отнести и инструмент отступа между буквами текста letter-spacing, что тоже может быть полезно в некоторых случаях, дополняя предыдущее запишем word-spacing, который выполняет роль отступа между словами. Начиная знакомство с Box-model, мы создадим новый класс и вынесем его в CSS, подчеркнем выделяемое пространство background с характерным цветом, далее мы создаем единый class для всего что остается и назовем его container, открывая внутренний код страницы и выбирая наш обьект исследования container, можно увидеть несколько кубических фигур: самый крупный margin, последующий border, малый padding, самый наименьший не имеет наименовония и представляет собой разрешение текущего рабочего блока в которой уже ранее была включена информация, мы попробовали прописать в CSS атрибут padding и задаем ему значение нескольких px, первым из которых будет верхнее значение и нижнее, второй будет отвечать за правую и левую сторону, если оставлять одно значение, оно будет автоматически применяться для всех сторон, дополняя уже к имеющему значениям, можно так же задать его для абсолютно любой из сторон, таким образом мы наблюдаем за появляющимся отсутом на странице визуального отражения, переходя к следующему кубу border, отмечаем его важные пункты: ширина "px", стиль границы "solid", цветовая разметка "rgb", в конечном итоге мы получаем полноценную большую рамку которую отделяет весь наш рабочий сегмент, сюда так же можно отнести отдельный атрибут border-bottom-style, который позволяет персонализировать нижнюю часть по своему усмотрению, делая её отличной/похожей на общую рамку, кастом часть border-top-width с некоторым значением px, мы увеличиваем внешнее значение, верхней границы, с помощью border-"left/right"-color, можно выбрать отличающийся цвет от основной рамки, переходя к самому крупному кубу margin, мы реализуем больший отступ от основных элементов который находятся не посредство вне нашего container. Делая отсутупление можно создавать свободное пространство через <div> пропысывая внутри него style, margin-bottom, используя некоторое значение px, и вуаля, у нас есть свободное пустое пространство исскуственно созданое. Рассмотрим тот самых box-model, мы создавали в нем несколько <div> задавая им уникальный класс который в CSS мы вынесли его отдельно, но и задали конкретное отношение использование настроек только к пределам тех <div>, которые есть в пределах группы, научились с ним работать, выстраивая цвет - background, высота "height", ширина "width", границы "border", расположение "float", размер и расположение "box-sizing", на этом мы закончили этот вводный конструкт так как он служил для нас примером того как можно помещать информацию с разделением её. Возвращаясь к теме ссылок, можно отметить возможность взаимодействия и с ними, для этого можно изменить все и сразу, создавая через существующую команду <a> в CSS, для них цвет и подчеркивание, так что можно скрыть намеренно или для большей красоты приравнивая к обычному тексту. Дополнение декорации к тексту, можно отнести различные вспомогательные надстройки: hover, active, visited где hover - задает значение для наведения курсора мышки на ссылку, active - работает по принципу зажатия,выделяя текст указывая на гиперссылку, visited - отвечает за подчерк гиперссылок которые уже были посещены или часто посещяемые пользователем текущим. Из интересного стоит отметить что некоторые сегментры рабочего поля можно разбивать и менять по отдельности, делает это с использованием <div> и присвоением class, выносим его после в CSS, и там уже указываем его необходимые значения которые будут применяться к class, настраивая цвет мы дописываем новое значение формата bg-color/name - где часть через тире можно назвать как угодно, я выдал значения цвета которое будет использоваться по отношению к каждому блоку разное, внутри мы прописываем background, записывая от одного до множества и уже возвращаемся к нашему документу HTML, и дописываем <div class= "name class" bg-color/name> и наблюдаем как наш сегмент или сегменты применяют к себе конкретное значение описанное в CSS. Полезное свойство в CSS это возможность убрать все отступы и прочее с помощью класса по умолчанию "*" где присваиваются значения сразу для всех элементов не смотря на уже существующие class. При работе со списками есть возможность выносить все редактируемы параметры в CSS, используя имеющийся class, и li, что означает список, задаем цвет шрифту, отступы, и разделение между пунктами. При работе с таблицами можно вынести интересное наблюдение, мы можем обратиться к каждому столбцу не посредственно через атрибут, уже известная нам форма ".table td", где после добавляем "nth-child(n)", где n это наш полноценный столбец с которым мы работаем и изменяем по необходимости, например смена цвета, шрифта и т.д, добавим, данный стиль имеет распостранение на другие столбцы с помощью простой записи и можно дописав увидеть отображение и на последующих столбцах. Рассматривая функцию "nth-child(n)", стоит добавить что она так же работает и со строками, например взаимодействует с четными "even" и не четными "odd", тем самым можно выбирать интересующие нас строки. Возвращаясь к теме редактирования ссылок, можно воспользоваться новоосвенной командой "list-style", которая принимает значения от простых форм отсупа до вставки фото для ссылок. При выделении окон в которых мы пишем, можно заметить наличие синего подчеркивающего света, который обозначает выбранность конкретного окошка с помощью обращения outline можно задать значение none, и убрать его или же по вариативности изменить на желаемый. Добавляя к работе с окнами, можно привязать внутренний текст к шрифту который используется на нашей странице, для этого прописываем font-family и даем его значение inherit, и получаем формат текста по образцу нашего шрифта. Исходя из работы с блоком form-group input, мы влияли на все свойства кроме одного так как оно не имело к нему отношения, речь идет об окне для набора текста так как его значение textarea, тем самым чтобы не создавать дубликат, мы через запятую и отступом  на следующую страницу прописываем аналогично уже существующий form-group input, form-group textarea и применяется исходные значения и для этого окошка. Создавая новый div "row" мы модулируем имеющиеся окошки как нам будет удобнее, задаем отступ margin и расположение хаотичное dispay: flex, далее мы обращаемся к form-group, записывая это как .row > .form-goup и дополняем тем что хотим видеть как наши окна будут расположены на половину свободного пространства width: 50%, и делаем отступ справа margin-right, получаем тем самым не собранными в кучу наборами окон а равномерно расположеными, здесь же мы можем сделать обращение к конкретному элементу, выглядит это аналогично запипи: .row > form-group:first/last-child но добавляется через двоеточие понимание первого и последнего. Далее мы переходим к разработки самой кнопки, прописывая новый класс .btn в нем мы настраиваем цвет, отступы и прочее, формируем далее обращение .btn:hover, где прописываем opacity что придает ощущение нашей кнопки интерактивности. Интересное дополнение, создаем новый класс position и помещаем его в блок где мы прописывали кнопочки и строчки, внутри класса создаем под класс box, в который записываем шириру, высоту и цвет (width,height,background), получая тем самым не большой квадратик в области размещения, возвращаемся в класс position в нем мы уже выставляем границы (border) и отступы (margin-top), а так же внутренним отступом (padding), возвращаемся в бокс к той самой функции новоиспеченной position она отвечает за положение нашего кубика при значение static, он сохраняет свое положение изначальное, принимая значение absolut, наш кубик начинает принимать положение не зависящее от заключенных рамок что мы создали для него, из этого нам открываются четыре новые возможности, рассмотрим первую: top - определяет положение обьекта относительно всей страницы выходя за рамки существующих модулей и прочего, left - перемещает обьект в сторону от рамок существующих нашего блока, right - аналогично со сдвигом в право, и bottom - низ/центр. В родительском блоке мы прописываем ту же функцию position но со значением relative, отмечая родительский блок. В box, можно рассмотреть помимо absolut, например fixed, тогда наш кубик будет перемещаться вместе с нашим окном просмотра согласно размещению его сторон на странице. Завершая (наконец) CSS, последнее дополнение к нашему оформлению это функция которая позволит отображать корректно нашу страницу на мобильных устройствах @media (max-width:700px), прописывается @media со значением максимального расширения в 700px а так же внутри мы выбираем наше начало страницы и предаем значение block, тем самым избегая дальнейшего смещения.

Добавляю полезный сайт для box-shadow: https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow.
Добавляю полезный сайт для list-style: https://developer.mozilla.org/en-US/docs/Web/CSS/list-style
